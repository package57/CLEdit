void ProcessScreen();
void ReadScreen();
    InitUser();
        WhatCommand();
        WhatCommandA(); 
        WhatCommandB(); 
        WhatCommandCC();
        WhatCommandDD();
        WhatCommandI(); 
        WhatCommandMM(); 
        WhatCommandOO(); 
        WhatCommandRR(); 
        WhatCommandSR();
        WhatCommandSL(); 
        WhatCommandXX();
void LookForChanges();
void InitIF();
void InitCTrackers();
void InitCC();
void InitMM();
void InitOO();
void InitRR();
void InitCTrackers();
void CLEditFrame::WhatCommand()
{

//    LogFile << "What Command " << std::endl;

    if (u == 0)
    {
        LogFile << "WhatCommand " << std::endl;
    }

// uppercase
    UserLinestr[0] = toupper(UserLinestr[0]);
    UserLinestr[1] = toupper(UserLinestr[1]);

// look for line commands in the first position only
    if (UserLinestr[0] == 'A')
    {
        WhatCommandA(); return;
    }

    if (UserLinestr[0] == 'B')
    {
        WhatCommandB(); return;
    }

    if (UserLinestr[0] == 'C')
    {
        WhatCommandCC(); return;
    }

    if (UserLinestr[0] == 'D')
    {
        WhatCommandDD(); return;
    }

    if (UserLinestr[0] == 'M')
    {
        WhatCommandMM(); return;
    }

    if (UserLinestr[0] == 'O')
    {
        WhatCommandOO(); return;
    }

    if (UserLinestr[0] == 'R')
    {
        WhatCommandRR(); return;
    }

    if (UserLinestr[0] == '>')
    {
        WhatCommandSR(); return;
    }

    if (UserLinestr[0] == '<')
    {
        WhatCommandSL(); return;
    }

    if (UserLinestr[0] == 'X')
    {
        WhatCommandXX(); return;
    }

    if (UserLinestr[0] == 'I')
    {
        WhatCommandI(); return;
    }

    Input[u].Linestr = UserLinestr;

}
void CLEditFrame::WhatCommandA()
{

    LogFile << "What Command A " << std::endl;

    Input[u].Linestr = "A";

    afters++;

}
void CLEditFrame::WhatCommandB()
{

    LogFile << "What Command B " << std::endl;

    Input[u].Linestr = "B";

    befores++;

}
void CLEditFrame::WhatCommandCC()
{

    LogFile << "What Command CC " << std::endl;

    if  (UserLinel > 1)
    {
        if (UserLinestr[1] == 'C')
        {
            Input[u].Linestr = "CC";
            blockCC = true;
        }
        else
        {
            return;
        }
    }
    else
    {
        singleC++;
        haveaC = u;
        Input[u].Linestr = "C";
    }

}
void CLEditFrame::WhatCommandDD()
{

    LogFile << "What Command DD " << std::endl;

    if  (UserLinel > 1)
    {
        if (UserLinestr[1] == 'D')
        {
            Input[u].Linestr = "DD";
            blockDD = true;
        }
        else
        {
            return;
        }
    }
    else
    {
        singleD++;
        Input[u].Linestr = "D";
    }

}
void CLEditFrame::WhatCommandMM()
{

    LogFile << "What Command MM " << std::endl;

    if  (UserLinel > 1)
    {
        if (UserLinestr[1] == 'M')
        {
            Input[u].Linestr = "MM";
            blockMM = true;
        }
        else
        {
            return;
        }
    }
    else
    {
        singleM++;
        haveaM = u;
        Input[u].Linestr = "M";
    }

}
void CLEditFrame::WhatCommandOO()
{

    LogFile << "What Command OO " << std::endl;

    if  (UserLinel > 1)
    {
        if (UserLinestr[1] == 'O')
        {
            Input[u].Linestr = "OO";
            blockOO = true;
        }
        else
        {
            return;
        }
    }
    else
    {
        singleO++;
        haveaO = u;
        Input[u].Linestr = "O";
    }

}
void CLEditFrame::WhatCommandRR()
{

    LogFile << "What Command RR " << std::endl;

    if  (UserLinel > 1)
    {
        if (UserLinestr[1] == 'R')
        {
            Input[u].Linestr = "RR";
            blockRR = true;
        }
        else
        {
            return;
        }
    }
    else
    {
        singleR++;
        haveaR = u;
        Input[u].Linestr = "R";
    }

}
void CLEditFrame::WhatCommandSR()
{

    LogFile << "What Command >> " << std::endl;

//        int  SRi;      // number of characters to shift right

    if  (UserLinel > 1)
    {
        if (UserLinestr[1] == '>')
        {
            Input[u].Linestr = ">>";
            blockSR = true;
        }
        else
        {
            return;
        }
    }
    else
    {
        singleSR++;
        Input[u].Linestr = ">";
    }

}
void CLEditFrame::WhatCommandSL()
{

    LogFile << "What Command << " << std::endl;

//   int  SLi;      // number of characters to shift left

    if  (UserLinel > 1)
    {
        if (UserLinestr[1] == '<')
        {
            Input[u].Linestr = "<<";
            blockSL = true;
        }
        else
        {
            return;
        }
    }
    else
    {
        singleSL++;
        Input[u].Linestr = "<";
    }

}
void CLEditFrame::WhatCommandXX()
{

    LogFile << "What Command XX " << std::endl;

    if  (UserLinel > 1)
    {
        if (UserLinestr[1] == 'X')
        {
            Input[u].Linestr = "XX";
            blockXX = true;
        }
        else
        {
            return;
        }
    }
    else
    {
        singleX++;
        Input[u].Linestr = "X";
    }

}
void CLEditFrame::WhatCommandI()
{

    LogFile << "What Command I " << std::endl;

    singleI++;
    Input[u].Linestr = "I";

}

void CLEditFrame::Initialize()
{

    LogFile << "Initialize " << std::endl;

// screen
    InitScreen();
// variables
    haveaFile = false;
    CurrentFile = "";       // the name of the file currently being edite
    Byte        = ' ';      // do nothing - like a continue
    ypos        = 0;        // Y position
    pos         = 0;        // search position
    strpos      = 0;        // start position
    Mstrl       = 0;        // length of Move string
    Ostrl       = 0;        // length of Overlay string
    posp1       = 0;        // string position plus 1 - next byte
    str         = "";       // common string
    i           = 0;        // index into string
    wi          = 0;        // index into work string
    l           = 0;        // index other
// find
    FindStr     = "";       // find string
    res         = 0;        // result of STD::STRING::FIND
    FindCnt     = 0;        // number of times string found
    MinusOne    = -1;       // a constant easier to understand than STD::STRING::NPOS
    f           = 0;        // index into found string locations
    OnOne       = true;     // trigger for first time
    prevf       = 0;        // previously found string location

//change
    ChangeFrom  = "";       // change from string
    ChangeFroml = 0;        // change from string length
    ChangeLineT  = "";      // change line to string
    ChangeLineTl = 0;       // change line to string length
    ChangeLineF  = "";      // change line from string
    ChangeLineFl = 0;       // change line from string length
    ChngCnt     = 0;        // number of times change from string found
    tf          = 0;        // index into change from found string locations
    OnOnetf     = true;     // trigger for first time
    prevtf      = 0;        // previously found string location
    ChangeTo    = "";       // change to string
    ChangeTol   = 0;        // change to string length

// Command
    Commandl    = 0;        // the length of the command line string
    Commandstr      = "";   // the command string
    PrimaryCommand  = "";   // the Primary command
    FirstParameter  = "";   // the first parameter
    SecondParameter = "";   // the second parameter
    ThirdParameter  = "";   // the third parameter

// for binary search
    left = 0;               // lower bound of array
    right = 0;              // upper bound of array
    mid = 0;                // location of 'key' if found
    key = "";               // key value to search for

// this is the "screen" 50 lines of visible code ( line command area 6 bytes / line of code 80 bytes)
    InitUser();
// to make the line command area pretty "000010"
//      ostringstream os;     defined local because otherwise it concatenates
    prettyint = 0;      // STD::OSTRINGSTREAM::SETW number to output
    prettystr = "";     // result string from STD::OSTRINGSTREAM::SETW
// error / logging
    Return = true;          // return
    ReturnFunction = "";    // the name of the function running
    ReturnCode = "";        // a return code
    ReturnMessage = "";     // a meaningful return message

// file to and from file functions
    InitCF();
// files to and from stage database
    InitDB();
// the file open by the user
    InitIF();
// the work file being processed
    InitWIF();
// a line or block being Copied
    InitCC();
// a line or block to be Moved
    InitMM();
// a line or block to be Overlaid
    InitOO();
// a line or block to be Repeated
    InitRR();
// line command trackers
    InitCTrackers();
// index to found strings - find
    InitFF();
// index to found strings - change from
    InitTF();
// index to excluded lines
    InitXX();

}
void CLEditFrame::InitCF()
{

    LogFile << "Init CF File " << std::endl;
// file to or from file functions

    CF.inputfile[0].IFCode = "";    // Code string
    for (i = 1; i < 25000; i++)
    {
        CF.inputfile[i] = CF.inputfile[0];
    }

}
void CLEditFrame::InitDB()
{

    LogFile << "Init DB File " << std::endl;
// file to or from stage database functions

    DB.inputfile[0].IFCode = "";    // Code string
    for (i = 1; i < 25000; i++)
    {
        DB.inputfile[i] = DB.inputfile[0];
    }

}
void CLEditFrame::InitFF()
{

    LogFile << "Init FF " << std::endl;

    FF[0].index = 0;    // where in the winput is the string found - an index
    FF[0].pos = 0;      // what position - an index
    for (f = 1; f < 25000; f++)
    {
        FF[f] = FF[0];
    }

}
void CLEditFrame::InitTF()
{

    LogFile << "Init TF " << std::endl;

    TF[0].index = 0;    // where in the winput is the string change from found - an index
    TF[0].pos = 0;      // what position - an index
    for (tf = 1; tf < 25000; tf++)
    {
        TF[tf] = TF[0];
    }

}

void CLEditFrame::InitScreen()
{

    LogFile << "Init Screen " << std::endl;

    for (u =0; u < 50; u++)
    {
        CL[u].Line->ChangeValue("000000");  // line command string
        CL[u].Code->ChangeValue("");        // Code string
    }

}
void CLEditFrame::InitUser()
{

    LogFile << "Init User " << std::endl;

// this is the input from the user screen
// 50 lines on the screen
    u = 0;
    Input[0].Linel   = 0;       // line command string length
    Input[0].Linestr = "";      // line command string
    Input[0].Codel   = 0;       // Code string length
    Input[0].Codestr = "";      // Code string
    for (i = 1; i < 50; i++)
    {
        Input[i] = Input[0];
    };

// a single line
    uInput.Linel   = 0;     // line command string length
    uInput.Linestr = "";    // line command string
    uInput.Codel   = 0;     // Code string length
    uInput.Codestr = "";    // Code string

// a line of user input from the screen
    UserLinel = 0;          // line command string length
    UserLinestr = "";       // line command string
    UserCodel = 0;          // Code string length
    UserCodestr = "";       // Code string

}

void CLEditFrame::InitWIF()
{

    LogFile << "Init WIF " << std::endl;

// the work file being processed
//  wfilecnt = 0;       // NO! do not set to zero!
//  oldwfilecnt = 0;    // NO! do not set to zero!

    winputfile[0].wIFlc = "000000";     // line command string
    winputfile[0].wIFCode = "";         // Code string
    for (i = 1; i < 25000; i++)
    {
        winputfile[i] = winputfile[0];
    }

}

void CLEditFrame::InitXX()
{

    LogFile << "Init XX " << std::endl;

    for (i = 1; i < 25000; i++)
    {
        XX[i].excluded = false;
    }

}
void CLEditFrame::CreateControls()
{

    LogFile << "Create Controls " << std::endl;

    wxPanel * Panel = new wxPanel(this);

    Panel->Bind(wxEVT_CHAR_HOOK, & CLEditFrame::OnKeyDown, this);

    Command = new wxTextCtrl(Panel
                             ,wxID_ANY
                             ,"enter command here"
                             ,wxPoint(1,1)      // l-r,t-b
                             ,wxSize(1670,20)  //w,h
                             ,wxBORDER_NONE
                            );

    Command->SetMaxLength(200);

    Apply = new wxButton(Panel
                         ,wxID_ANY
                         ,"Apply"
                         ,wxPoint(1620,1)
                         ,wxSize(50,20)
                         ,wxBORDER_NONE
                        );

    Apply->Bind(wxEVT_BUTTON, & CLEditFrame::OnApplyClicked, this);

    ypos = 20;
    for (u = 0; u < 50; u++)
    {
        CL[u].Line = new wxTextCtrl(Panel
    `                              ,wxID_ANY
                                   ,"000000"
                                   ,wxPoint(1,ypos)
                                   ,wxSize(60,20),wxBORDER_NONE);
        CL[u].Line->SetMaxLength(6);
        CL[u].Code = new wxTextCtrl(Panel
                                   ,wxID_ANY
                                   ,""
                                   ,wxPoint(61,ypos)
                                   ,wxSize(1610,20)
                                   ,wxBORDER_NONE);
        CL[u].Code->SetMaxLength(200);
        ypos += 20;
    }

    CreateStatusBar();

    wxLogStatus("Hello ");

    Return = true;

}
void CLEditFrame::ApplyChanges()
{

    LogFile << "Apply Changes " << std::endl;

}
